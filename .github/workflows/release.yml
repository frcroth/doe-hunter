# https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
name: Release

# Configures this workflow to run every time a change is pushed to the branch called `release`.
# on:
#   push:
#     branches: ['release']
on:
  push:
    # Pattern matched against refs/tags
    tags: 
      - 'v[0-9]+.[0-9]+.[0-9]+'

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  # lint
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: lint lib
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: ./lib

  # test 
  test:
    name: test-and-coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
      - name: generate test coverage
        run: go test ./lib/... -coverprofile=./profile.cov -covermode=atomic
      # see for badges: https://github.com/vladopajic/go-test-coverage/blob/main/docs/badge.md
      - name: push test coverage
        uses: vladopajic/go-test-coverage@v2
        with:
          config: ./.testcoverage.yml
          ## when token is not specified (value '') this feature is turend off
          ## in this example badge is created and committed only for main brach
          git-token: ${{ github.ref_name == 'main' && secrets.GITHUB_TOKEN || '' }}
          ## name of branch where badges are stored
          ## ideally this should be orphan branch (see below how to create this branch)
          git-branch: badges

  # build and push
  build-and-push-image:
    name: build-and-push
    needs: [lint, test]
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      # 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@1f36f5b7a2d2f7bfd524795fc966e6d88c37baa9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@d31acd50653ded455ab8972a1eb9a656b0aef94a
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)." 
      # NOT AVIALABLE IN PRIVATE REPOSITORIES
      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v1
      #   with:
      #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true